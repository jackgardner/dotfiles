" keyboard shortcuts
inoremap jj <ESC>
set background=dark
" highlight search
set hlsearch
nmap <leader>hl :let @/ = ""<CR>

set rtp+=/usr/local/opt/fzf

set cursorline
set autowrite
set nowritebackup
set whichwrap+=<,>,h,l,[,] " Wrap arrow keys between lines
let g:jsx_ext_required = 0
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'javascript': [
        \ 'eslint',
      \ ],
\}
let g:ale_fix_on_save = 1

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

let g:tagbar_type_javascript = {
    \ 'kinds' : [
        \ 'V:global variables:0:0',
        \ 'C:classes',
        \ 'M:methods',
        \ 'F:functions',
        \ 'E:exports',
        \ 'P:properties:0:0',
        \ 'T:tags',
        \ 'A:arrays',
        \ 'O:objects',
        \ '?:unknown',
    \ ],
\ }
nnoremap <leader>c :CtrlPBookmarkDir<CR>
let g:go_fmt_fail_silently = 1
let g:go_highlight_types = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
autocmd! bufwritepost .vimrc source ~/.vimrc
" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
    colorscheme spacegray
  else
    colorscheme desert
  endif
endif

let g:deoplete#enable_at_startup = 1

" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps
