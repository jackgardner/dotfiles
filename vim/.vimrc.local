" keyboard shortcuts
inoremap jj <ESC>
" set background=dark
" highlight search
set hlsearch
nmap <leader>hl :let @/ = ""<CR>


set mouse=a
set nocursorline
set nocursorcolumn
set noshowmode
set ruler
set visualbell


if exists("+relativenumber")
  set norelativenumber
endif

set foldlevel=0
set foldmethod=manual
let loaded_matchparen=1
set lazyredraw
set scrolljump=8
set autowrite
set nowritebackup
set ttyfast
set whichwrap+=<,>,h,l,[,] " Wrap arrow keys between lines
let g:jsx_ext_required = 0
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'rust': [
        \ 'rustfmt',
      \ ],
      \ 'typescript': [
        \ 'eslint',
      \ ],
      \ 'go': [
        \ 'gofmt',
      \ ],
      \ 'javascript': [
        \ 'eslint',
      \ ],
\}


let g:lightline = {
      \ 'colorscheme': 'seoul256',
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \ },
\ }
highlight link ALEWarningSign Todo
highlight link ALEErrorSign WarningMsg
highlight link ALEVirtualTextWarning Todo
highlight link ALEVirtualTextInfo Todo
highlight link ALEVirtualTextError WarningMsg
highlight ALEError guibg=NONE
highlight ALEWarning guibg=NONE
let g:ale_sign_error = "✖"
let g:ale_sign_warning = "⚠"
let g:ale_sign_info = "i"
let g:ale_sign_hint = "➤"
let g:ale_fix_on_save = 1

let g:tagbar_type_javascript = {
    \ 'kinds' : [
        \ 'V:global variables:0:0',
        \ 'C:classes',
        \ 'M:methods',
        \ 'F:functions',
        \ 'E:exports',
        \ 'P:properties:0:0',
        \ 'T:tags',
        \ 'A:arrays',
        \ 'O:objects',
        \ '?:unknown',
    \ ],
\ }
nnoremap <leader>c :CtrlPBookmarkDir<CR>
let g:go_fmt_fail_silently = 1
let g:go_highlight_types = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
autocmd! bufwritepost .vimrc source ~/.vimrc
" gui settings
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
set t_Co=256

let ayucolor="mirage"
" colorscheme base16-atelier-dune
" colorscheme base16-tomorrow-night
colorscheme ayu
" Disambiguate ,a & ,t from the Align plugin, making them fast again.
"
" This section is here to prevent AlignMaps from adding a bunch of mappings
" that interfere with the very-common ,a and ,t mappings. This will get run
" at every startup to remove the AlignMaps for the *next* vim startup.
"
" If you do want the AlignMaps mappings, remove this section, remove
" ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
function! s:RemoveConflictingAlignMaps()
  if exists("g:loaded_AlignMapsPlugin")
    AlignMapsClean
  endif
endfunction
command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
silent! autocmd VimEnter * RemoveConflictingAlignMaps

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()

nmap gb <Plug>(coc-rename)
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! LightlineFilename()
  return expand('%:t') !=# '' ? @% : '[No Name]'
endfunction

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
